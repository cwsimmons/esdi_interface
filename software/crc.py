
#   Copyright 2024 Christopher Simmons

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

def lsb32(payload, initial=0):
    if not isinstance(payload, bytes):
        raise TypeError()
    
    remainder = initial
    for x in payload:
        remainder = remainder ^ x

        for i in range(8):
            if (remainder & 0x01):
                # ethernet = 0xEDB88320
                remainder = (remainder >> 1) ^ 0x4440A051
            else:
                remainder = (remainder >> 1)
    return remainder

# 0x140A0445
# 0x4440A051

def msb32(payload, initial=0):
    if not isinstance(payload, bytes):
        raise TypeError()
    
    remainder = initial
    for x in payload:
        remainder = remainder ^ (x << 24)

        for i in range(8):
            if (remainder & 0x80000000):
                # 0x04C11DB7 == Ethernet
                remainder = ((remainder << 1) & 0xFFFFFFFF) ^ 0x41044185
            else:
                remainder = ((remainder << 1) & 0xFFFFFFFF)
    return remainder



def msb16(payload, initial=0):
    if not isinstance(payload, bytes):
        raise TypeError()
    
    remainder = initial
    for x in payload:
        remainder = remainder ^ (x << 8)

        for i in range(8):
            if (remainder & 0x8000):
                remainder = ((remainder << 1) & 0xFFFF) ^ 0x1021
            else:
                remainder = ((remainder << 1) & 0xFFFF)
    return remainder


data = [0x00, 0x09, 0x03, 0x08]

# An RT sector
sector = [
0x00, 0x5c, 0xc8, 0x5b, 0x00, 0x70, 0xcc, 0x13, 0x00, 0x10, 0xad, 0x1e, 0x8d, 0xff, 0xce,
0xde, 0xc5, 0x40, 0x00, 0x01, 0x9f, 0x2f, 0x0f, 0x04, 0x8c, 0xf0, 0x03, 0xe6, 0x00, 0xea, 0xcd,
0x0b, 0x00, 0x70, 0xcd, 0x1b, 0x00, 0x54, 0xcd, 0xfb, 0x00, 0x90, 0xcd, 0x2b, 0x00, 0x8c, 0xc5,
0xa0, 0xff, 0xff, 0xdc, 0x0e, 0x00, 0xd4, 0xdd, 0x1e, 0x00, 0xd8, 0xdd, 0x2e, 0x00, 0xdc, 0x9e,
0xf1, 0x07, 0x1e, 0xcd, 0xfb, 0x00, 0xa8, 0xd4, 0x09, 0x40, 0x00, 0x8f, 0x90, 0x00, 0x20, 0xdd,
0xfe, 0x00, 0xe0, 0xc8, 0x50, 0xff, 0xff, 0x62, 0x90, 0x64, 0x50, 0x8d, 0xff, 0xca, 0x2a, 0xc8,
0x3e, 0x00, 0xec, 0xd3, 0x02, 0x00, 0x00, 0x8f, 0xa0, 0x00, 0x0e, 0xdd, 0x2e, 0x00, 0xc8, 0xc8,
0x2d, 0x02, 0x1c, 0x8d, 0xff, 0xca, 0x5b, 0xc8, 0x30, 0x00, 0x34, 0x00, 0xbb, 0x8c, 0xf0, 0x03,
0xb4, 0x00, 0xb8, 0xc8, 0xf0, 0x00, 0x80, 0xde, 0xfe, 0x00, 0xe4, 0xd4, 0x0a, 0x40, 0x00, 0x09,
0x26, 0xb3, 0x9a, 0x0a, 0x1e, 0xc8, 0x50, 0xff, 0xff, 0x62, 0xa0, 0x64, 0x50, 0x8d, 0xff, 0xca,
0x09, 0xc8, 0x3e, 0x01, 0x04, 0xd3, 0x02, 0x00, 0x00, 0x8f, 0xa0, 0x00, 0x0d, 0xdd, 0x2e, 0x00,
0xc8, 0xc8, 0x2d, 0x02, 0x50, 0x8d, 0xff, 0xca, 0x3a, 0xc8, 0x30, 0x00, 0x34, 0x8c, 0xf0, 0x03,
0xa8, 0x00, 0x98, 0xc8, 0xf0, 0x00, 0x80, 0x89, 0x80, 0x00, 0x0a, 0xde, 0xfe, 0x00, 0xe4, 0xc8,
0x2e, 0x01, 0x04, 0x8d, 0xf0, 0xf1, 0x5d, 0xc8, 0x4e, 0x00, 0xec, 0xd4, 0x0a, 0x40, 0x00, 0x96,
0xf2, 0xd4, 0x09, 0x40, 0x00, 0x01, 0x03, 0x9f, 0x29, 0x0f, 0x11, 0xd4, 0x09, 0x40, 0x00, 0x96,
0xff, 0x9f, 0xf9, 0x07, 0x03, 0x9f, 0x29, 0x07, 0x10, 0xd4, 0x0a, 0x40, 0x00, 0x01, 0x03, 0x9f,
0xf9, 0x07, 0x11, 0x9f, 0xf9, 0x0f, 0x02, 0x01, 0x14, 0xbd, 0xee, 0x8c, 0xf0, 0x00, 0x36, 0x89,
0x80, 0x00, 0x14, 0xdd, 0x2e, 0x00, 0xc8, 0x8c, 0xf0, 0x00, 0x90, 0x89, 0x80, 0x00, 0x0e, 0xdd,
0x2e, 0x00, 0xc8, 0x8c, 0xf0, 0x01, 0x9c, 0x89, 0x80, 0x00, 0x08, 0xdd, 0x2e, 0x00, 0xc8, 0x8c,
0xf0, 0x02, 0x62, 0xdd, 0x2e, 0x00, 0xc8, 0xd3, 0x02, 0x00, 0x00, 0x02, 0x1a, 0xc8, 0x2d, 0x02,
0x84, 0x8d, 0xff, 0xc9, 0xf4, 0xc8, 0x30, 0x00, 0x1c, 0xce, 0xfe, 0x00, 0xe4, 0x9f, 0xf8, 0x07,
0x05, 0x8d, 0xff, 0xcc, 0x30, 0xda, 0x2e, 0x00, 0xd0, 0xce, 0xfe, 0x00, 0xe8, 0x9f, 0xf8, 0x88,
0xff, 0xff, 0x49, 0x8d, 0xff, 0xcc, 0x27, 0xda, 0x2e, 0x00, 0xd4, 0x88, 0x8f, 0xff, 0x43, 0x8c,
0xf0, 0x03, 0x4f, 0x88, 0x8f, 0xff, 0x3f, 0xd9, 0x6e, 0x00, 0x58, 0xcd, 0x1e, 0x00, 0xe0, 0x94,
0x10, 0x03, 0x56, 0xcd, 0x5c, 0x00, 0x98, 0xcd, 0xfe, 0x01, 0x1c, 0xc1, 0xb1, 0xff, 0xff, 0xcd,
0x4e, 0x00, 0xd8, 0xcd, 0xae, 0x00, 0xdc, 0xcc, 0x1f, 0x7e, 0x00, 0x66, 0xf5, 0xda, 0xfe, 0x00,
0xd0, 0xc8, 0x8a, 0x00, 0x01, 0xc8, 0xd4, 0x00, 0x01, 0xda, 0x9e, 0x00, 0xd4, 0xdd, 0xfe, 0x01,
0x24, 0xa4, 0x20, 0xc8, 0x50, 0x02, 0x00, 0x67, 0x50, 0x8d, 0xff, 0xc7, 0x98, 0xcd, 0x3e, 0x01,
0x24, 0xc1, 0x72, 0x00, 0x00, 0x8f, 0xa0, 0x00, 0x0d, 0xdd, 0x2e, 0x00, 0xc8, 0x8c, 0x20, 0x00,
0x02, 0xc1, 0x22, 0x06, 0x7c, 0x8d, 0xff, 0xc9, 0xaa, 0xa4, 0x3c, 0x60, 0x00, 0x00, 0x29, 0x64,
0xa0, 0xa4, 0x21, 0x63, 0x90, 0xc8, 0x50, 0x02, 0x00, 0x8d, 0xff, 0xc7, 0x80, 0x67, 0x50, 0x60,
0x00, 0xc1, 0x72, 0x00, 0x00, 0x8f, 0xa0, 0x00, 0x0d, 0xdd, 0x2e, 0x00, 0xc8, 0x8c, 0x20, 0x00,
0x02
]

# An s36 sector
sector = [
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xf0, 0xf3, 0xf6,
    0x00, 0x00, 0x00, 0x04, 0x00, 0x0f, 0xc5, 0xc1, 0x00, 0x06, 0x98, 0x4f, 0x00, 0x00, 0x19, 0x4f,
    0x00, 0x00, 0x04, 0x85, 0x0f, 0xf0, 0xf4, 0xf2, 0xf2, 0xf9, 0xf6, 0x00, 0x05, 0x83, 0x2f, 0x00,
    0x00, 0x16, 0x2f, 0x00, 0x00, 0x04, 0x05, 0x0f, 0xf0, 0xf4, 0xf2, 0xf2, 0xf9, 0xf6, 0x00, 0x05,
    0x83, 0x2f, 0x00, 0x00, 0x16, 0x2f, 0x00, 0x00, 0x04, 0x05, 0x0f, 0xf0, 0xf4, 0xf2, 0xf2, 0xf9,
    0xf6, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0x00, 0x02, 0x33, 0x3f, 0x00, 0x00, 0x06, 0x5f, 0x00, 0x00, 0x01, 0x62, 0x0f,
    0xf0, 0xf4, 0xf2, 0xf2, 0xf9, 0xf6, 0x00, 0x01, 0x94, 0x4f, 0x00, 0x00, 0x05, 0x4f, 0x00, 0x00,
    0x01, 0x35, 0x0f, 0xf0, 0xf4, 0xf2, 0xf2, 0xf9, 0xf6, 0x00, 0x01, 0x94, 0x4f, 0x00, 0x00, 0x05,
    0x4f, 0x00, 0x00, 0x01, 0x35, 0x0f, 0xf0, 0xf4, 0xf2, 0xf2, 0xf9, 0xf6, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0xf0, 0xf4, 0xf2, 0xf0, 0xf3, 0xf7, 0xf2,
    0x40, 0xc2, 0xf0, 0xf0, 0xf5, 0xf0, 0xf1, 0xf5, 0xf2, 0xf0, 0xf0, 0xf1, 0xf0, 0xe9, 0xc1, 0xd5,
    0xe3, 0xc1, 0xc3, 0x40, 0xf7, 0xf5, 0x40, 0xe3, 0xc1, 0xc2, 0xe2, 0x6b, 0x40, 0xf7, 0xf5, 0xd4,
    0xc7, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe6, 0xc1, 0xd9, 0xd5, 0xc5,
    0xd9
]


print(hex(msb16(bytes(sector), 0xffff)))
# print(hex(~msb32(sector, 0x0) & 0xFFFFFFFF))


# RT
# reveng.exe -s -w 32 000002196a89cf83 0000021aa9850d0c 00000205f0e758f1 00090513b72e66df
# width=32  poly=0x41044185  init=0x8e07e879  refin=false  refout=false  xorout=0x00000000  check=0xe655f925  residue=0x00000000  name=(none)

# Micropolis 1558-15, soft sectored, unknown controller

# Address Area
# Include 0xFE sync byte at the start to use init=0x0000
# reveng.exe -s -w 16 00010220000f2d 00010212006cda 0001012100654c 0001001400a81c
# width=16  poly=0x1021  init=0x0ed1  refin=false  refout=false  xorout=0x0000  check=0x3382  residue=0x0000  name=(none)

# Data Area
# reveng.exe -s -w 32 -f s4.bin s7.bin s8.bin s9.bin
# width=32  poly=0x140a0445  init=0x00000000  refin=false  refout=false  xorout=0x00000000  check=0x86aceee1  residue=0x00000000  name=(none)